services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: coffee_mysql_fallback
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_CHARSET: utf8mb4
      MYSQL_COLLATION: utf8mb4_unicode_ci
    volumes:
      - coffe_mysql_data:/var/lib/mysql
      - ./docker/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - coffee_fallback_network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 60s
    pull_policy: always
    command: >
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_unicode_ci
      --innodb-buffer-pool-size=128M
      --max-connections=50

  # NestJS Backend
  backend:
    image: coffe-backend:latest
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: coffee_backend_fallback
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      NODE_ENV: production
      PORT: 3001
      DB_HOST: mysql
      DB_PORT: 3306
      DB_USERNAME: ${MYSQL_USER}
      DB_PASSWORD: ${MYSQL_PASSWORD}
      DB_DATABASE: ${MYSQL_DATABASE}
      DB_SSL: "false"
      JWT_SECRET: ${JWT_SECRET}
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASS: ${SMTP_PASS}
    volumes:
      - coffe_uploads_data:/app/uploads
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - coffee_fallback_network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Angular Frontend
  frontend:
    image: coffe-frontend:latest
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: coffee_frontend_fallback
    restart: unless-stopped
    ports:
      - "4000:80"
    environment:
      NODE_ENV: production
    depends_on:
      - backend
    networks:
      - coffee_fallback_network
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:80 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 90s

volumes:
  coffe_mysql_data:
  coffe_uploads_data:

networks:
  coffee_fallback_network:
    driver: bridge
