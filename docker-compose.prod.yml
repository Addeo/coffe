version: '3.8'

services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: coffee_mysql_prod
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: coffee_admin
      MYSQL_USER: coffee_user
      MYSQL_PASSWORD: coffee_password
      MYSQL_CHARSET: utf8mb4
      MYSQL_COLLATION: utf8mb4_unicode_ci
    volumes:
      - mysql_data:/var/lib/mysql
      - ./docker/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - coffee_prod_network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # NestJS Backend for SberCloud
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: coffee_backend_prod
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      NODE_ENV: production
      PORT: 3001
      # Database settings (using local MySQL container)
      DB_HOST: mysql
      DB_PORT: 3306
      DB_USERNAME: coffee_user
      DB_PASSWORD: coffee_password
      DB_DATABASE: coffee_admin
      DB_SSL: "false"
      # JWT Secret (generate strong random string)
      JWT_SECRET: ${JWT_SECRET}
      # Email settings
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASS: ${SMTP_PASS}
    volumes:
      # Mount uploads directory for file storage
      - uploads_data:/app/uploads
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - coffee_prod_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/test/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Angular Frontend with SSR for SberCloud
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: coffee_frontend_prod
    restart: unless-stopped
    ports:
      - "4000:4000"
    environment:
      NODE_ENV: production
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - coffee_prod_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  uploads_data:

networks:
  coffee_prod_network:
    driver: bridge