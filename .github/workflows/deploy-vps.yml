name: Deploy to VPS (Cloud.ru) [DISABLED - Use Deploy with Fallback instead]

# DISABLED: This workflow is disabled. Use deploy-with-fallback.yml instead.
on:
  push:
    branches:
      - __disabled_workflow_never_runs__

jobs:
  deploy:
    # Job disabled - always skip
    if: false
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔐 Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          echo "SSH key saved, first line:"
          head -n 1 ~/.ssh/id_rsa
          echo "VPS Host: ${{ secrets.VPS_HOST }}"
          echo "Adding known hosts..."
          ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts 2>&1 || echo "ssh-keyscan failed, continuing..."
          echo "SSH setup complete"

      - name: 🔍 Debug - Check project structure
        run: |
          echo "=== Project structure ==="
          find . -name "nginx.conf" -type f
          echo "=== Frontend directory ==="
          ls -la frontend/
          echo "=== nginx.conf content ==="
          cat frontend/nginx.conf

      - name: 🛠️ Update Dockerfile with fixed nginx config
        run: |
          cat > frontend/Dockerfile << 'DOCKERFILE'
          # Stage 1: Build the application
          FROM node:20-alpine AS build
          WORKDIR /app
          
          COPY package*.json ./
          RUN npm install --legacy-peer-deps
          COPY . .
          RUN npm run build -- --base-href /
          
          # Stage 2: Serve with Nginx
          FROM nginx:alpine
          
          COPY --from=build /app/dist/coffee-admin /usr/share/nginx/html
          COPY nginx.conf /etc/nginx/conf.d/default.conf
          
          EXPOSE 80
          CMD ["nginx", "-g", "daemon off;"]
          DOCKERFILE

      - name: 📦 Copy files to VPS
        run: |
          rsync -avz -e "ssh -o StrictHostKeyChecking=no" \
            --exclude 'node_modules' \
            --exclude '.git' \
            --exclude 'backend/dist' \
            --exclude 'backend/database.sqlite' \
            --exclude 'backend/uploads' \
            --exclude 'frontend/dist' \
            --exclude 'frontend/node_modules' \
            ./ ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:/home/${{ secrets.VPS_USER }}/coffe/

      - name: 📝 Create .env file on VPS
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "cd ~/coffe && cat > .env << 'ENVEOF'
          NODE_ENV=production
          PORT=3001
          
          DB_HOST=mysql
          DB_PORT=3306
          DB_USERNAME=${{ secrets.MYSQL_USER }}
          DB_PASSWORD=${{ secrets.MYSQL_PASSWORD }}
          DB_DATABASE=${{ secrets.MYSQL_DATABASE }}
          DB_SSL=false
          
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          
          SMTP_HOST=${{ secrets.SMTP_HOST }}
          SMTP_PORT=${{ secrets.SMTP_PORT }}
          SMTP_USER=${{ secrets.SMTP_USER }}
          SMTP_PASS=${{ secrets.SMTP_PASS }}
          
          MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}
          MYSQL_USER=${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}
          ENVEOF"

      - name: 🛑 Stop containers
        run: |
          ssh -o StrictHostKeyChecking=no \
              -o ServerAliveInterval=30 \
              -o ServerAliveCountMax=10 \
              ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} \
            "cd ~/coffe && docker-compose -f docker-compose.prod.yml down --remove-orphans || true"

      - name: 🧹 Cleanup old images
        run: |
          ssh -o StrictHostKeyChecking=no \
              -o ServerAliveInterval=30 \
              ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} \
            "docker image prune -af"

      - name: 🏗️ Build images
        run: |
          ssh -o StrictHostKeyChecking=no \
              -o ServerAliveInterval=30 \
              -o ServerAliveCountMax=20 \
              -o TCPKeepAlive=yes \
              ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} \
            "cd ~/coffe && docker-compose -f docker-compose.prod.yml build --no-cache --pull"

      - name: 🚀 Start services
        run: |
          ssh -o StrictHostKeyChecking=no \
              -o ServerAliveInterval=30 \
              ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} \
            "cd ~/coffe && docker-compose -f docker-compose.prod.yml up -d"

      - name: ⏳ Wait for startup
        run: sleep 20

      - name: 📊 Check status
        run: |
          ssh -o StrictHostKeyChecking=no \
              ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} \
            "cd ~/coffe && docker-compose -f docker-compose.prod.yml ps"

      - name: ✅ Deployment complete
        run: |
          echo "🎉 Deployment successful!"
          echo "Backend: http://${{ secrets.VPS_HOST }}:3001"
          echo "Frontend: http://${{ secrets.VPS_HOST }}:4000"