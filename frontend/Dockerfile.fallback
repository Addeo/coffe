# Stage 1: Build the application with fallback
FROM node:20-alpine AS build
WORKDIR /app

# Copy package files
COPY package*.json ./

# Install dependencies
RUN npm install --legacy-peer-deps

# Copy source code
COPY . .

# Create builds directory for fallback
RUN mkdir -p /app/builds

# Build script with fallback mechanism
RUN cat > /app/build-with-fallback.sh << 'EOF'
#!/bin/sh
set -e

echo "üî® Starting frontend build process..."

# Try to build the application
if npm run build; then
    echo "‚úÖ Frontend build successful"
    
    # Create timestamped backup
    TIMESTAMP=$(date +%Y%m%d_%H%M%S)
    echo "üì¶ Creating backup: build_$TIMESTAMP"
    
    # Copy successful build to builds directory
    cp -r dist /app/builds/build_$TIMESTAMP
    
    # Create symlink to latest successful build
    ln -sfn /app/builds/build_$TIMESTAMP /app/builds/latest
    
    # Keep only last 5 builds
    cd /app/builds
    ls -t | grep build_ | tail -n +6 | xargs -r rm -rf
    
    echo "‚úÖ Frontend build completed and backed up"
else
    echo "‚ùå Frontend build failed, checking for fallback..."
    
    # Check if we have a previous successful build
    if [ -d "/app/builds/latest" ]; then
        echo "üîÑ Using fallback build..."
        cp -r /app/builds/latest /app/dist
        echo "‚úÖ Fallback build restored"
    else
        echo "‚ùå No fallback build available, creating minimal fallback..."
        
        # Create minimal fallback HTML
        mkdir -p /app/dist/coffee-admin
        cat > /app/dist/coffee-admin/index.html << 'FALLBACK_EOF'
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Coffee Admin - Maintenance</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            margin: 0;
            padding: 0;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            color: white;
        }
        .container {
            text-align: center;
            background: rgba(255, 255, 255, 0.1);
            padding: 2rem;
            border-radius: 10px;
            backdrop-filter: blur(10px);
            box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);
        }
        .icon {
            font-size: 4rem;
            margin-bottom: 1rem;
        }
        h1 {
            margin-bottom: 1rem;
            font-size: 2rem;
        }
        p {
            margin-bottom: 0.5rem;
            opacity: 0.9;
        }
        .status {
            background: rgba(255, 193, 7, 0.2);
            padding: 0.5rem 1rem;
            border-radius: 20px;
            margin-top: 1rem;
            display: inline-block;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="icon">‚òï</div>
        <h1>Coffee Admin</h1>
        <p>–°–∏—Å—Ç–µ–º–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞</p>
        <p>–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ...</p>
        <div class="status">üîÑ Maintenance Mode</div>
        <p style="margin-top: 1rem; font-size: 0.9rem; opacity: 0.7;">
            –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç
        </p>
    </div>
    <script>
        // Auto-refresh every 30 seconds
        setTimeout(() => {
            window.location.reload();
        }, 30000);
    </script>
</body>
</html>
FALLBACK_EOF
        echo "‚úÖ Minimal fallback created"
    fi
fi
EOF

RUN chmod +x /app/build-with-fallback.sh

# Run the build with fallback
RUN /app/build-with-fallback.sh

# Stage 2: Serve with Nginx
FROM nginx:alpine

# Copy built app to nginx
COPY --from=build /app/dist/coffee-admin /usr/share/nginx/html

# Copy nginx configuration
COPY nginx.conf /etc/nginx/conf.d/default.conf

# Health check script
RUN cat > /usr/share/nginx/html/health-check.html << 'EOF'
<!DOCTYPE html>
<html><head><title>Health Check</title></head>
<body><h1>OK</h1></body></html>
EOF

# Health check script for nginx
RUN cat > /usr/local/bin/health-check.sh << 'EOF'
#!/bin/sh
# Check if nginx is serving content
if wget --no-verbose --tries=1 --spider http://localhost:80/health-check.html 2>/dev/null; then
    echo "‚úÖ Frontend health check passed"
    exit 0
else
    echo "‚ùå Frontend health check failed"
    exit 1
fi
EOF

RUN chmod +x /usr/local/bin/health-check.sh

EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]
